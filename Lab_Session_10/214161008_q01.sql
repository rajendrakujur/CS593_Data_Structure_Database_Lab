CREATE DATABASE 214161008_05;

USE 214161008_05;

CREATE TABLE INVENTORY
(
    PRODUCT_ID INTEGER,
    PRODUCT_NAME VARCHAR(20),
    QUANTITY INTEGER,
    PRICE FLOAT,
    PRIMARY KEY (PRODUCT_ID)
);

CREATE TABLE PRODUCT
(
    PRODUCT_ID INTEGER,
    PRODUCT_NAME VARCHAR(20),
    QUANTITY INTEGER,
    STATUS VARCHAR(20),
    PRODUCT_LOG DATETIME,
    PRIMARY KEY (PRODUCT_ID)
);

CREATE TABLE PURCHASE
(
    PRODUCT_ID INTEGER,
    BRAND_NAME VARCHAR(20),
    PRODUCT_NAME VARCHAR(20),
    QUANTITY INTEGER,
    PRICE FLOAT,
    PURCHASE_DATE DATE,
    PRIMARY KEY (PRODUCT_ID, BRAND_NAME)
);


-- (I) Write a before insert and before delete trigger on Inventory table to log
-- the products in the Product


DELIMITER //
CREATE TRIGGER NEW_INTO_INVENTORY BEFORE INSERT ON INVENTORY
FOR EACH ROW    
BEGIN 
    IF (SELECT count(*) FROM PRODUCT WHERE PRODUCT_ID = NEW.PRODUCT_ID) = 0 THEN
        INSERT INTO PRODUCT VALUES (NEW.PRODUCT_ID, NEW.PRODUCT_NAME, NEW.QUANTITY, 'AVAILABLE', NOW());
    ELSE 
        UPDATE PRODUCT
        SET QUANTITY = NEW.QUANTITY, STATUS = 'AVAILABLE', PRODUCT_LOG = NOW() 
        WHERE PRODUCT_ID = NEW.PRODUCT_ID; 
    END IF;
END;
//
DELIMITER ;

INSERT INTO INVENTORY VALUES (1, 'SMARTPHONE', 3, 750);
INSERT INTO INVENTORY VALUES (3, 'SPEAKER', 2, 220);
INSERT INTO INVENTORY VALUES (2, 'SMARTWATCH', 4, 540);
INSERT INTO INVENTORY VALUES (4, 'MIC', 8, 100);
INSERT INTO INVENTORY VALUES (5, 'TABLETS', 6, 680);
INSERT INTO INVENTORY VALUES (6, 'KEYBOARD', 10, 140);
INSERT INTO INVENTORY VALUES (7, 'LAPTOP', 12, 1025);   

SELECT * FROM INVENTORY;
SELECT * FROM PRODUCT;

DELIMITER //
CREATE TRIGGER REMOVE_FROM_INVENTORY BEFORE DELETE ON INVENTORY
FOR EACH ROW
BEGIN 
    UPDATE PRODUCT
    SET QUANTITY = 0, STATUS = 'NOT AVAILABLE', PRODUCT_LOG = NOW() 
    WHERE PRODUCT_ID = OLD.PRODUCT_ID;
END;
//
DELIMITER ;


DELETE FROM INVENTORY WHERE PRODUCT_ID = 1 ;

SELECT * FROM INVENTORY;
SELECT * FROM PRODUCT;

-- (II) Write a before update trigger on Inventory table to check that Quantity
-- and Price should not be less than ‘0’.

DELIMITER //
CREATE TRIGGER BEFORE_UPDATING_INVENTORY BEFORE UPDATE ON INVENTORY
FOR EACH ROW
BEGIN 
    IF NEW.QUANTITY IS NOT NULL THEN 
        IF NEW.QUANTITY < 0 THEN
            SIGNAL SQLSTATE "25000"
            SET MESSAGE_TEXT = "QUANTITY can't be less than 0";
        END IF;
    END IF;

    IF NEW.PRICE IS NOT NULL THEN 
        IF NEW.PRICE < 0 THEN
            SIGNAL SQLSTATE "25000"
            SET MESSAGE_TEXT = "PRICE can't be less than 0";
        END IF;
    END IF;
END;
//
DELIMITER ;

UPDATE INVENTORY
SET PRICE = -20
WHERE PRODUCT_ID = 5;

UPDATE INVENTORY
SET QUANTITY = -1
WHERE PRODUCT_ID = 3;

-- (III) Write a after delete trigger on Inventory table to remove the products
-- having Quantity less than ‘0’

DELETE FROM INVENTORY;

INSERT INTO INVENTORY VALUES (1, 'SMARTPHONE', 5, 750);
INSERT INTO INVENTORY VALUES (3, 'SPEAKER', 2, 220);
INSERT INTO INVENTORY VALUES (2, 'SMARTWATCH', 4, 540);
INSERT INTO INVENTORY VALUES (4, 'MIC', 8, 100);
INSERT INTO INVENTORY VALUES (5, 'TABLETS', 6, 680);
INSERT INTO INVENTORY VALUES (6, 'KEYBOARD', 10, 140);
INSERT INTO INVENTORY VALUES (7, 'LAPTOP', 12, 1025);  

SELECT * FROM INVENTORY;
SELECT * FROM PRODUCT;


DELIMITER //
CREATE TRIGGER AFTER_DELETING_INVENTORY AFTER DELETE ON INVENTORY
FOR EACH ROW
BEGIN 
    UPDATE PRODUCT 
    SET QUANTITY = 0, STATUS = 'NOT AVAILABLE', PRODUCT_LOG = NOW()
    WHERE PRODUCT_ID = OLD.PRODUCT_ID;

    DELETE FROM PRODUCT WHERE QUANTITY < 0 ;
END;
//
DELIMITER ;

DELETE FROM INVENTORY WHERE PRODUCT_ID = 3;
SELECT * FROM INVENTORY;
SELECT * FROM PRODUCT;

-- (IV) Write a before insert trigger on Purchase table to check whether the
-- product selected by the user is available or not for purchase. If available,
-- enter an entry else show error.

DELIMITER //
CREATE TRIGGER INSERT_TO_PURCHASE BEFORE INSERT ON PURCHASE
FOR EACH ROW
BEGIN 
    DECLARE CURRENT_STATUS VARCHAR(20);

    SELECT STATUS INTO CURRENT_STATUS
    FROM PRODUCT 
    WHERE PRODUCT_ID = NEW.PRODUCT_ID;

    IF CURRENT_STATUS <> 'AVAILABLE' THEN
        SIGNAL SQLSTATE "25000"
        SET MESSAGE_TEXT = "PRODUCT isn't available for purchase.";
    END IF;

END;
//
DELIMITER ;

INSERT INTO PURCHASE VALUES (3, 'LOGITECH', 'SPEAKER', 5, 220, '2021-05-15');
INSERT INTO PURCHASE VALUES (4, 'BOYA', 'MIC', 3, 200, '2021-08-02');

SELECT * FROM PURCHASE;
SELECT * FROM PRODUCT;

-- (V) Extending IV, also check for the quantity of the product. If available, enter
-- an entry else show error.

DELIMITER //
CREATE TRIGGER INSERT_IN_PURCHASE_QUANTITY BEFORE INSERT ON PURCHASE
FOR EACH ROW
BEGIN
    DECLARE CURRENT_STATUS VARCHAR(20);
    DECLARE CURRENT_QUANTITY INTEGER;

    SELECT STATUS INTO CURRENT_STATUS
    FROM PRODUCT 
    WHERE PRODUCT_ID = NEW.PRODUCT_ID;

    IF CURRENT_STATUS = 'AVAILABLE' THEN

        SELECT QUANTITY INTO CURRENT_QUANTITY 
        FROM PRODUCT 
        WHERE PRODUCT_ID = NEW.PRODUCT_ID;

        IF CURRENT_QUANTITY < NEW.QUANTITY THEN
            SIGNAL SQLSTATE "25000"
            SET MESSAGE_TEXT = "Sufficient Products not available.";
        END IF;

    ELSEIF CURRENT_STATUS <> 'AVAILABLE' THEN
        SIGNAL SQLSTATE "25000"
        SET MESSAGE_TEXT = "PRODUCT isn't available for purchase.";

    END IF;
END;
//
DELIMITER ;

INSERT INTO PURCHASE VALUES (5, 'APPLE', 'TABLET', 3, 200, '2021-01-12');
SELECT * FROM PURCHASE;

-- (VI) Write a after insert trigger on Purchase table to update the values at
-- Inventory table.

DELETE FROM PURCHASE;

DELIMITER //
CREATE TRIGGER TRACK_QUANTITY AFTER INSERT ON PURCHASE
FOR EACH ROW
BEGIN 
    DECLARE CURRENT_STATUS VARCHAR(20);
    DECLARE CURRENT_QUANTITY INTEGER;
    DECLARE UPDATED_QUANTITY INTEGER ;

    SELECT STATUS INTO CURRENT_STATUS
    FROM PRODUCT 
    WHERE PRODUCT_ID = NEW.PRODUCT_ID;

    IF CURRENT_STATUS = 'AVAILABLE' THEN

        SELECT QUANTITY INTO CURRENT_QUANTITY 
        FROM PRODUCT 
        WHERE PRODUCT_ID = NEW.PRODUCT_ID;

        IF CURRENT_QUANTITY < NEW.QUANTITY THEN
            SIGNAL SQLSTATE "25000"
            SET MESSAGE_TEXT = "Sufficient Products not available.";
        
        ELSE
            SET UPDATED_QUANTITY = CURRENT_QUANTITY - NEW.QUANTITY;
            
            UPDATE INVENTORY 
            SET QUANTITY = UPDATED_QUANTITY 
            WHERE PRODUCT_ID = NEW.PRODUCT_ID;

            UPDATE PRODUCT 
            SET QUANTITY = UPDATED_QUANTITY 
            WHERE PRODUCT_ID = NEW.PRODUCT_ID;
        END IF;

    ELSEIF CURRENT_STATUS <> 'AVAILABLE' THEN
        SIGNAL SQLSTATE "25000"
        SET MESSAGE_TEXT = "PRODUCT isn't available for purchase.";

    END IF;
END;
//
DELIMITER ;

SELECT * FROM INVENTORY;
SELECT * FROM PURCHASE;


INSERT INTO PURCHASE VALUES (5, 'APPLE', 'TABLET', 3, 200, '2021-01-12');
